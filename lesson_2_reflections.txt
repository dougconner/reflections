git init
is used to initialize a repository in a directory.
This command sets up the repository but does not make any commits.
Once I saved this new file, it shows up in the git status.
It still has no commits.

How is the staging area different from the working directory and the respository?
What value do you think it offers?
The staging area is necessary when you have more than one file in the directory.
This lets you select which files will be added to the repository.
The working directory contains all the files.
The repository contains the committed files.
The staging area is where you define which files git will go in the repository.

How can you use the staging area to make sure you have one commit per logical change?
If you do a git diff command then it will show any files that have changed that have not been added to the staging area.
If no files show up then all the changed files are in the staging area.
If you do a commit then it will save all the changes in one commit.
It is up to you to make sure you only make one logical change before a commit.

What are some situations when branches would be helpful in keeping organized?
How would branches help?
Branches would be helpful for experimental changes, especially multiple.
Branches would be helpful when a modification is risky and lengthy.
Branches would be helpful when you want to pursue multiple different goals.
Branches help by letting you continue development on two different designs.
Branches help by letting you assign a name to a branch for easily finding it.

How do diagrams help you visualize the branch structure?
The log graph features helps some but you probably need to draw a diagram to fully understand the branch structure.
It is especially important if you want to know which changes are in you branch.

What is the result of merging two branches together?
Why do we represent the diagram the way we do?
The result of merging made a file with the combination of the two branches.
Although the color mod worked it did not include color for coins.
Using the git show command where color was added I could see how it was done.
Then I was able to go in and easily modify the code to color coins.
The merging diagram represents what happened.
After merge it may not be quite as clear what happened when it becomes one path.

What are the pros and cons of Git's automatic merging vs always doing manual?
It looks like if git can do an automatic merge it will probably work.
I would want to test that for quite a while to become more confident.
If git can't auto-merge, then it provides a good setup for the manual merge.
It seems like there is little to loose with the auto merge.
